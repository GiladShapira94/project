kind: project
metadata:
  name: nyc-taxi-gilad
spec:
  functions:
  - url: db://nyc-taxi-gilad/taxi
    name: taxi
  - url: db://nyc-taxi-gilad/model-serving
    name: model-serving
  workflows:
  - name: main
    code: "from kfp import dsl\nfrom mlrun.platforms import auto_mount\nimport os\n\
      import sys\nimport mlrun\n\nfuncs = {}\n\n# init functions is used to configure\
      \ function resources and local settings\ndef init_functions(functions: dict,\
      \ project=None, secrets=None):\n    for f in functions.values():\n        f.apply(auto_mount())\n\
      \n@dsl.pipeline(\n    name=\"NYC Taxi Demo\",\n    description=\"Convert ML\
      \ script to MLRun\"\n)\n\ndef kfpipeline():\n\n    taxi_records_csv_path = mlrun.get_sample_path('data/Taxi/yellow_tripdata_2019-01_subset.csv')\n\
      \    zones_csv_path = mlrun.get_sample_path('data/Taxi/taxi_zones.csv')\n  \
      \  \n    # build our ingestion function (container image)\n    builder = funcs['taxi'].deploy_step(skip_deployed=True)\n\
      \    \n    # run the ingestion function with the new image and params\n    ingest\
      \ = funcs['taxi'].as_step(\n        name=\"fetch_data\",\n        handler='fetch_data',\n\
      \        image=builder.outputs['image'],\n        inputs={'taxi_records_csv_path':\
      \ taxi_records_csv_path,\n                'zones_csv_path': zones_csv_path},\n\
      \        outputs=['nyc-taxi-dataset', 'zones-dataset'])\n\n    # Join and transform\
      \ the data sets \n    transform = funcs[\"taxi\"].as_step(\n        name=\"\
      transform_dataset\",\n        handler='transform_dataset',\n        inputs={\"\
      taxi_records_csv_path\": ingest.outputs['nyc-taxi-dataset'],\n             \
      \   \"zones_csv_path\" : ingest.outputs['zones-dataset']},\n        outputs=['nyc-taxi-dataset-transformed'])\n\
      \n    # Train the model\n    train = funcs[\"taxi\"].as_step(\n        name=\"\
      train\",\n        handler=\"train_model\",\n        inputs={\"input_ds\" : transform.outputs['nyc-taxi-dataset-transformed']},\n\
      \        outputs=['FareModel'])\n    \n    # Deploy the model\n    deploy =\
      \ funcs[\"model-serving\"].deploy_step(models={\"taxi-serving_v1\": train.outputs['FareModel']},\
      \ tag='v2')\n"
    engine: null
  artifacts: []
  source: ''
  subpath: ''
  origin_url: ''
  desired_state: online
  disable_auto_mount: false
